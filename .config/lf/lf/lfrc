# interpreter for shell commands (needs to be POSIX compatible)
set shell zsh
set icons

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $f in 
        *.md) $EDITOR $fx;;
        *.mdx) $EDITOR $fx;;
        *.xml) $EDITOR $fx;;
        *.html) $EDITOR $fx;;
        *.css) $EDITOR $fx;;
        *.scss) $EDITOR $fx;;
        *.sass) $EDITOR $fx;;
        *.less) $EDITOR $fx;;
        *.py) $EDITOR $fx;;
        *.rb) $EDITOR $fx;;
        *.php) $EDITOR $fx;;
        *.pl) $EDITOR $fx;;
        *.java) $EDITOR $fx;;
        *.c) $EDITOR $fx;;
        *.h) $EDITOR $fx;;
        *.cpp) $EDITOR $fx;;
        *.c++) $EDITOR $fx;;
        *.tex) $EDITOR $fx;;
        *.sty) $EDITOR $fx;;
        *.cls) $EDITOR $fx;;
        *.aux) $EDITOR $fx;;
        *.log) $EDITOR $fx;;
        *.out) $EDITOR $fx;;
        *.go) $EDITOR $fx;;
        *.rs) $EDITOR $fx;;
        *.js) $EDITOR $fx;;
        *.jsx) $EDITOR $fx;;
        *.vue) $EDITOR $fx;;
        *.ts) $EDITOR $fx;;
        *.tsx) $EDITOR $fx;;
        *.snippets) $EDITOR $fx;;
        *.cmake) $EDITOR $fx;;
        *.dart) $EDITOR $fx;;
        *Dockerfile) $EDITOR $fx;;
        *Makefile) $EDITOR $fx;;
        # shell
        *.sh) $EDITOR $fx;;
        *.zsh) $EDITOR $fx;;
        *.bash) $EDITOR $fx;;
        # data
        *.yml) $EDITOR $fx;;
        *.json) $EDITOR $fx;;
        *.toml) $EDITOR $fx;;
        *.yaml) $EDITOR $fx;;
        *.csv) $EDITOR $fx;;
        *.txt) $EDITOR $fx;;
        *.in) $EDITOR $fx;;
        *.out) $EDITOR $fx;;
        *.sql) $EDITOR $fx;;
        # miscell
        *.lock) $EDITOR $fx;;
        *.d) $EDITOR $fx;;
        # audio
        *.mp3) mpv $fx;;
        # videos
        *.mp4) mpv $fx;;
        *.mkv) mpv $fx;;
        *.mov) mpv $fx;;
        *.flv) mpv $fx;;
        # pictures
        *.jpg) sxiv $fx;;
        *.png) sxiv $fx;;
        # books
        *.pdf) zathura $fx;;
        *.epub) zathura $fx;;
        # libreoffice
        *.doc) libreoffice  $fx;;
        *.docx) libreoffice  $fx;;
    esac
    exit
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        image/*) sxiv $fx;;
        audio/*) mpv $fx;;
        video/*) mpv $fx;;
        application/json) $EDITOR $fx;;
        application/pdf) zathura $fx;;
        application/epub) zathura $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd bulk-rename ${{
    old=$(mktemp)
    new=$(mktemp)
    [ -n $fs ] && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    $EDITOR $new
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
        src=$(printf $names | cut -f1)
        dst=$(printf $names | cut -f2)
        [ $src = $dst ] && continue
        [ -e $dst ] && continue
        mv $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}

cmd yank-dirname ${{
    dirname -- "$f" | tr -d '\n' | xclip -i -selection clipboard
}}

cmd yank-path ${{
    echo "$fx" | xclip -i -selection clipboard
}}

cmd yank-basename ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a -- |
      xclip -i -selection clipboard
}}

cmd yank-basename-without-extension ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a -- |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' | xclip -i -selection clipboard
}}


# maps

map grea cd /media/HOME/ahacad/WORKSTATION/Readings
map gdw cd /media/HOME/ahacad/Downloads
map gnews cd /media/HOME/ahacad/WORKSTATION/Working/Newspaper
map gdil cd /media/HOME/ahacad/WORKSTATION/Working/dil
map gcar cd /media/HOME/ahacad/WORKSTATION/Working/career/Hiring
map gfdu cd /media/Seagate-next/FUDAN/SY1nd
map gvd cd /media/Seagate-next/VIDEÃ–S
map gbk cd /media/Seagate-next/BOOKS
map gwk cd /media/HOME/ahacad/WORKSTATION/Working
map gbog cd /media/HOME/ahacad/WORKSTATION/Working/-BLOG
map gpj cd /media/HOME/ahacad/.ahacad/.projects
map gsc cd /media/HOME/ahacad/WORKSTATION/SourceCodes
map gre cd /media/HOME/ahacad/WORKSTATION/Working/TOEFLGRE
map goj cd /media/HOME/ahacad/WORKSTATION/Working/oj
map gma cd /media/HOME/ahacad/WORKSTATION/Working/-MATRIX/MATRIX
map gtir cd /media/HOME/ahacad/WORKSTATION/Working/BLOG/ahacad.github.io-markdown-articles/articles/today-I-read
map gtol cd /media/HOME/ahacad/WORKSTATION/Working/-MATRIX/matrix-tools
map gstg cd /media/HOME/ahacad/WORKSTATION/Working/-MATRIX/MATRIX/HumanComputer/DISK
map gwork cd /media/HOME/ahacad/WORKSTATION/Working/-MATRIX/MATRIX-work
map gmind cd /media/HOME/ahacad/WORKSTATION/Working/-MATRIX/MATRIX-minding
map gwubi cd /media/HOME/ahacad/WORKSTATION/Working/wubi
map gfdxk cd /media/HOME/ahacad/WORKSTATION/Working/fdxk
map gicon cd /media/HOME/ahacad/WORKSTATION/Working/-I-contribute
map gfdif cd /media/HOME/ahacad/WORKSTATION/Working/-fdxk.info
map gbody cd /media/HOME/ahacad/WORKSTATION/Working/#physical-body
map gal cd /media/HOME/ahacad/WORKSTATION/Working/-gallery
map gcheat cd /media/HOME/ahacad/WORKSTATION/Working/cheat
map gwkly cd /media/HOME/ahacad/WORKSTATION/Working/-learn/#weekly
map gnote cd /media/HOME/ahacad/WORKSTATION/Working/-learn/#notebooks
map gwiki cd /media/HOME/ahacad/WORKSTATION/Working/-learn/#wiki
map gtid cd /media/HOME/ahacad/WORKSTATION/Working/-learn/#today
map gjap cd /media/HOME/ahacad/WORKSTATION/Working/-learn/#japanese
map glearn cd /media/HOME/ahacad/WORKSTATION/Working/-learn/#learning
map greadme cd /media/HOME/ahacad/WORKSTATION/Working/#readme!
map gjp cd /media/Seagate-next/BOOKS/K.Languages/KB.Japanese
map galgo cd /media/Seagate-next/BOOKS/E.CS/EH.Algorithms
map gcard cd /media/HOME/ahacad/WORKSTATION/Working/-learn/#cards
map gokr- cd /media/HOME/ahacad/WORKSTATION/Working/-working/#OKR
map gconf cd /media/HOME/ahacad/WORKSTATION/Working/-working/#Configurations
map ginfra cd /media/HOME/ahacad/WORKSTATION/Working/-working/#infrastructure
map gpaper cd /media/HOME/ahacad/WORKSTATION/Working/-working/#paper
map gfail cd /media/HOME/ahacad/WORKSTATION/Working/#failures
map gwritings cd /media/HOME/ahacad/WORKSTATION/Working/writings
map gcsopen cd /media/HOME/ahacad/WORKSTATION/Working/-CSOPEN
