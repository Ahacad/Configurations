# == operations control

snippet if "the if " w
if ($1){
    ${2:${VISUAL}}
}
$0
endsnippet

snippet ife "if else" w
if ($1){
    ${2:${VISUAL}}
} else {
    $3
}
$0
endsnippet


snippet for "the for" w
for ($1; $2; $3){
    ${0:${VISUAL}}
}
endsnippet

snippet whi "while" w
while($1){
    ${0:${VISUAL}}
}
endsnippet



snippet fun "the void function" w
${1:int} ${2:main}(${3:}){
    ${0:${VISUAL}}
}
endsnippet

snippet class "a new class" b
class ${1:Solution}{
public:
    ${2:int} ${3:func}($4){
        $0
    }
};
endsnippet


snippet	stand "standard file form" bw
#include <cstdio>
#include <iostream>

int main(){
    using namespace std;
    $0
}
endsnippet

snippet head "standard header for oj" bw
#include <iostream>
#include <fstream>
$1
using namespace std;

$2

int read(){
    $3
    return 0;
}

int solve(){
    $0
}

int	main(){
    read();
    solve();
    
    return 0;
}
endsnippet


# == templates for ojs

snippet cofo "codeforces template" bw
#include <iostream>
#include <algorithm>
$1
using namespace std;
using ll = long long;

const int LEN = 1e5 + 5;

$2

int main(){
    #ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    #endif
    
    std::ios::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    $0
    
    return 0;
}
endsnippet

snippet leco "leetcode template" bw
#include <cstdio>
#include <iostream>
#include <vector>

using namespace std;

${VISUAL}

$0

int main(){

    return 0;
}
endsnippet


snippet noco "nowcoder template" bw
#include <cstdio>
#include <algorithm>
$1
using namespace std;

using ll = long long;

$2

int main(){
    #ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    #endif
    
    $0
    
    return 0;
}
endsnippet
